#                                                                    -*-perl-*-
$description = "Stem computation and substitution.";

$details = 'Test that make correctly computes stem and substitutes % for
computed stem in pattern rules and static pattern rules with and without second
expansion and with and without last slash.';

my @dir = ('', 'lib/'); # With and without last slash.
my @secondexpansion = ('', '.SECONDEXPANSION:');
my @targets = ('', 'bye.x: '); # pattern rules and static pattern rules.

for my $se (@secondexpansion) {
for my $d (@dir) {
for my $t (@targets) {
my $p = $d && $t ? "$d$t" : "$t";
my $dollar = $se ? '$' : '';

# One func, one %.
run_make_test("
$se
all: ${d}bye.x
lib/bye.1 bye.1:; \$(info \$@)
${p}%.x: $dollar\$(firstword %.1); \$(info \$@)
", '', "${d}bye.1\n${d}bye.x\n#MAKE#: Nothing to be done for 'all'.\n");

# Multiple funcs, each has one %.
run_make_test("
$se
all: ${d}bye.x
lib/bye.1: lib/bye.2; \$(info \$@)
bye.1: bye.2; \$(info \$@)
lib/bye.2 bye.2:; \$(info \$@)
${p}%.x: $dollar\$(firstword %.1) $dollar\$(firstword %.2); \$(info \$@)
", '', "${d}bye.2\n${d}bye.1\n${d}bye.x\n#MAKE#: Nothing to be done for 'all'.\n");

# Multiple funcs, each has multiple %.
run_make_test("
$se
all: ${d}bye.x
lib/bye.1: lib/bye.2; \$(info \$@)
lib/bye.2: lib/bye.3; \$(info \$@)
lib/bye.3: lib/bye.4; \$(info \$@)
lib/bye.4 bye.4:; \$(info \$@)
bye.1: bye.2; \$(info \$@)
bye.2: bye.3; \$(info \$@)
bye.3: bye.4; \$(info \$@)
${p}%.x: $dollar\$(wordlist 1, 99, %.1 %.2) $dollar\$(wordlist 1, 99, %.3 %.4); \$(info \$@)
", '', "${d}bye.4\n${d}bye.3\n${d}bye.2\n${d}bye.1\n${d}bye.x\n#MAKE#: Nothing to be done for 'all'.\n");

# Nested functions.
run_make_test("
$se
all: ${d}bye.x
lib/bye.1: lib/bye.2; \$(info \$@)
lib/bye.2: lib/bye.3; \$(info \$@)
lib/bye.3: lib/bye.4; \$(info \$@)
lib/bye.4 bye.4:; \$(info \$@)
bye.1: bye.2; \$(info \$@)
bye.2: bye.3; \$(info \$@)
bye.3: bye.4; \$(info \$@)
${p}%.x: $dollar\$(wordlist 1, 99, $dollar\$(wordlist 1, 99, %.1 %.2)) $dollar\$(wordlist 1, 99, $dollar\$(wordlist 1,99, %.3 %.4)); \$(info \$@)
", '', "${d}bye.4\n${d}bye.3\n${d}bye.2\n${d}bye.1\n${d}bye.x\n#MAKE#: Nothing to be done for 'all'.\n");

# Multiple funcs, each has multiple words, each has multiple %, sole %,
# various corner cases.
# Make should substitude the first % in each word with the stem.
run_make_test("
$se
all: ${d}bye.x
${p}%.x: $dollar\$(wordlist 1, 99, %1%2% % 3%4%5 6%) %7%8 %9 $dollar\$(wordlist 1, 99, %10% 11%12) 13; \$(info \$@)

bye1%2%: 3bye4%5; \$(info \$@)
3bye4%5: bye7%8; \$(info \$@)
bye7%8: bye10%; \$(info \$@)
bye10%: bye; \$(info \$@)
bye: 6bye; \$(info \$@)
6bye: bye9; \$(info \$@)
bye9: 11bye12; \$(info \$@)
11bye12: 13; \$(info \$@)
13:; \$(info \$@)

lib/bye1%2%: lib/3bye4%5; \$(info \$@)
lib/3bye4%5: lib/bye7%8; \$(info \$@)
lib/bye7%8: lib/bye10%; \$(info \$@)
lib/bye10%: lib/bye; \$(info \$@)
lib/bye: lib/6bye; \$(info \$@)
lib/6bye: lib/bye9; \$(info \$@)
lib/bye9: lib/11bye12; \$(info \$@)
lib/11bye12: 13; \$(info \$@)
", '', "13\n${d}11bye12\n${d}bye9\n${d}6bye\n${d}bye\n${d}bye10%\n${d}bye7%8\n${d}3bye4%5\n${d}bye1%2%\n${d}bye.x\n#MAKE#: Nothing to be done for 'all'.\n");

# Nested functions.

# Malformed makefile.

# Long prerequisite name.
}
}
}

1;
